{"version":3,"sources":["redux/app/reducer.js","redux/user/reducer.js","redux/index.js","components/templates/BlankTemplate/index.js","pages/HomePage/index.js","pages/GuestsPage/index.js","App.js","constants/Routes/index.js","serviceWorker.js","index.js","configureStore.js"],"names":["initialState","isLoading","isLoading_Auth","isAuthenticated","isAuthChecking","user","error_auth","combineReducers","app","state","action","type","error","BlankPageTemplate","props","className","clsx","page_name","children","HomePage","Container","Row","Col","GuestsPage","App","Fragment","path","exact","component","Boolean","window","location","hostname","match","store","reduxLogger","createLogger","predicate","getState","middlewares","thunk","createStore","rootReducer","compose","applyMiddleware","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wWACaA,EAAe,CACxBC,WAAW,GCDR,IAAMD,EAAe,CACxBE,gBAAgB,EAChBC,iBAAiB,EACjBC,gBAAgB,EAChBC,KAAM,GACNC,WAAY,ICFDC,kBAAgB,CAC3BC,IFAW,WAAmD,IAA/BC,EAA8B,uDAAtBT,EAAcU,EAAQ,uCAC7D,OAAQA,EAAOC,MACX,IAAK,aACD,OAAO,2BACAF,GADP,IAEIR,UAAWS,EAAOT,YAG1B,QACI,OAAOQ,IETXJ,KDIO,WAAmD,IAA/BI,EAA8B,uDAAtBT,EAAcU,EAAQ,uCAC7D,OAAQA,EAAOC,MACX,IAAK,kBACD,OAAO,2BACAF,GADP,IAEIP,eAAgBQ,EAAOT,UACvBK,WAAYI,EAAOE,MAAQF,EAAOE,MAAQ,KAElD,IAAK,gBACD,OAAO,2BACAH,GADP,IAEIJ,KAAMK,EAAOL,KACbF,iBAAiB,IAErB,IAAK,cACD,OAAO,2BACAM,GADP,IAEIN,iBAAiB,EACjBE,KAAM,KAElB,QACI,OAAOI,M,2EEVJI,EARW,SAACC,GACvB,OACI,yBAAKC,UAAWC,YAAK,iBAAD,eAA0BF,EAAMG,aAChD,yBAAKF,UAAW,gBAAiBD,EAAMI,YCepCC,G,MAbE,WACf,OACE,kBAAC,EAAD,CAAcF,UAAW,QACvB,kBAACG,EAAA,EAAD,CAAWL,UAAW,UACpB,kBAACM,EAAA,EAAD,CAAKN,UAAW,4DACd,kBAACO,EAAA,EAAD,CAAKP,UAAW,cCAVQ,EAPI,WACf,OACI,wCCWMC,EAbH,WACV,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KCpBO,IDoBWC,OAAK,EAACC,UAAWT,IAC1C,kBAAC,IAAD,CAAOO,KCpBS,UDoBWC,OAAK,EAACC,UAAWL,QETlCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFN,IAAMC,ECXS,SAAwBlC,GAGnC,IAAMmC,EAAcC,uBAAa,CAACC,UAAW,SAACC,EAAU5B,GAAX,OAAsB,KAC/D6B,EAAc,CAACC,KAKnB,OAFID,EAAW,sBAAOA,GAAP,CAAmBJ,IAE3BM,YACHC,EACA1C,EACA2C,YAAQC,IAAe,WAAf,cAAmBL,MDDrBM,GAGdC,IAASC,OACP,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,EAAD,OAEFc,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.f0663af0.chunk.js","sourcesContent":["\nexport const initialState = {\n    isLoading: false\n};\n\nexport default function appReducer(state = initialState, action) {\n    switch (action.type) {\n        case \"IS_LOADING\":\n            return {\n                ...state,\n                isLoading: action.isLoading\n            };\n\n        default:\n            return state;\n    }\n}\n","\nexport const initialState = {\n    isLoading_Auth: false,\n    isAuthenticated: false,\n    isAuthChecking: false,\n    user: {},\n    error_auth: \"\"\n};\n\nexport default function appReducer(state = initialState, action) {\n    switch (action.type) {\n        case \"AUTH_IS_LOADING\":\n            return {\n                ...state,\n                isLoading_Auth: action.isLoading,\n                error_auth: action.error ? action.error : \"\",\n            };\n        case \"AUTH_SET_USER\":\n            return {\n                ...state,\n                user: action.user,\n                isAuthenticated: true\n            };\n            case \"AUTH_LOGOUT\":\n                return {\n                    ...state,\n                    isAuthenticated: false,\n                    user: {},\n                };\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport app from './app/reducer';\nimport user from './user/reducer';\n\nexport default combineReducers({\n    app,user\n});","/*\n * File: index.js\n * File Created: Friday, 4th September 2020 2:56:49 pm\n * Author: Buwaneka (buwanekasumanasekara@gmail.com)\n * -----\n * Last Modified: Friday, 4th September 2020 2:56:49 pm\n * Modified By: Buwaneka (buwanekasumanasekara@gmail.com>)\n * --------------------------------------------------------------\n */\nimport React  from 'react';\nimport clsx from \"clsx\";\n\nconst BlankPageTemplate = (props) => {\n    return(\n        <div className={clsx(\"blank-template\",`page-${props.page_name}`)}>\n            <div className={\"page_content\"}>{props.children}</div>\n        </div>\n    )\n}\n\nexport default BlankPageTemplate;","/*\n * File: index.js\n * File Created: Monday, 31st August 2020 3:04:52 pm\n * Author: Buwaneka (buwanekasumanasekara@gmail.com)\n * -----\n * Last Modified: Monday, 31st August 2020 3:04:52 pm\n * Modified By: Buwaneka (buwanekasumanasekara@gmail.com>)\n * --------------------------------------------------------------\n */\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Image, Container, Row, Col } from 'react-bootstrap';\nimport PageTemplate from \"../../components/templates/BlankTemplate\";\nimport \"./styles.scss\"\n\nconst HomePage = () => {\n  return (\n    <PageTemplate page_name={\"home\"}>\n      <Container className={\" h-100\"}>\n        <Row className={\"d-flex justify-content align-items-center vh-100 mx-auto\"}>\n          <Col className={\"logo\"} ></Col>\n        </Row>\n      </Container>\n    </PageTemplate>\n  )\n}\n\n\nexport default HomePage;","/*\n * File: index.js\n * File Created: Monday, 31st August 2020 3:04:45 pm\n * Author: Buwaneka (buwanekasumanasekara@gmail.com)\n * -----\n * Last Modified: Monday, 31st August 2020 3:04:45 pm\n * Modified By: Buwaneka (buwanekasumanasekara@gmail.com>)\n * --------------------------------------------------------------\n */\n\n\n import React , {useState,useEffect} from 'react';\n\n\n\n const GuestsPage = () => {\n     return (\n         <div>guests</div>\n     )\n }\n\n\n export default GuestsPage;","import React from 'react';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\n\n\nimport HomePage from \"./pages/HomePage\";\nimport GuestsPage from \"./pages/GuestsPage\";\n\nimport {\n  ROUTE_HOME,\n  ROUTE_GUESTS\n} from \"./constants/Routes\";\n\n\n\n\nconst App = () => {\n  return (\n    <React.Fragment>\n      <BrowserRouter>\n        <Switch>\n          <Route path={ROUTE_HOME} exact component={HomePage} />\n          <Route path={ROUTE_GUESTS} exact component={GuestsPage} />\n        </Switch>\n      </BrowserRouter>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","export const ROUTE_HOME=\"/\";\nexport const ROUTE_GUESTS=\"/guests\";\nexport const ROUTE_TABLES=\"/tables\";\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './configureStore';\n\nimport \"./theme/assets/vendor/nucleo/css/nucleo.css\";\nimport \"./theme/assets/vendor/font-awesome/css/font-awesome.min.css\";\nimport \"./theme/assets/scss/argon-design-system-react.scss\";\nimport \"./theme/custom/custom.scss\";\n\n\nimport App from './App';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { compose,createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from './redux';\n\nexport default function configureStore(initialState) {\n   \n    \n    const reduxLogger = createLogger({predicate: (getState, action) => true});\n    let middlewares = [thunk]\n   \n    if(true){\n        middlewares = [...middlewares,reduxLogger];\n    }\n    return createStore(\n        rootReducer,\n        initialState,\n        compose(applyMiddleware(...middlewares)),\n    );\n\n}"],"sourceRoot":""}